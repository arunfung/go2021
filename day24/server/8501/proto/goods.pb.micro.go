// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: goods.proto

package goods

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GoodsService service

func NewGoodsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GoodsService service

type GoodsService interface {
	GetGoodsDetail(ctx context.Context, in *RequestGoods, opts ...client.CallOption) (*ResponseGoods, error)
}

type goodsService struct {
	c    client.Client
	name string
}

func NewGoodsService(name string, c client.Client) GoodsService {
	return &goodsService{
		c:    c,
		name: name,
	}
}

func (c *goodsService) GetGoodsDetail(ctx context.Context, in *RequestGoods, opts ...client.CallOption) (*ResponseGoods, error) {
	req := c.c.NewRequest(c.name, "GoodsService.GetGoodsDetail", in)
	out := new(ResponseGoods)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoodsService service

type GoodsServiceHandler interface {
	GetGoodsDetail(context.Context, *RequestGoods, *ResponseGoods) error
}

func RegisterGoodsServiceHandler(s server.Server, hdlr GoodsServiceHandler, opts ...server.HandlerOption) error {
	type goodsService interface {
		GetGoodsDetail(ctx context.Context, in *RequestGoods, out *ResponseGoods) error
	}
	type GoodsService struct {
		goodsService
	}
	h := &goodsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GoodsService{h}, opts...))
}

type goodsServiceHandler struct {
	GoodsServiceHandler
}

func (h *goodsServiceHandler) GetGoodsDetail(ctx context.Context, in *RequestGoods, out *ResponseGoods) error {
	return h.GoodsServiceHandler.GetGoodsDetail(ctx, in, out)
}
